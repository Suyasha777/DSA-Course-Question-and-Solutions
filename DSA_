# DSA-Course-Question-and-Solutions
 class Node
    {
    public:
        int data;
        Node *next;
        Node(int data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

********************************/

Node* sortList(Node *head)
{
    // Write your code here.
    Node * temp=head;
    int zeroCount=0;
    int oneCount=0;
    int twoCount=0;
    while(temp!=NULL){
        if(temp->data==0){
            zeroCount++;
        }
        else if(temp->data==1){
            oneCount++;
       }
       else if(temp->data==2){
           twoCount++;
       }
       temp=temp->next;
    }
    temp=head;
    while(temp!=NULL){
        if(zeroCount!=0){
            temp->data=0;
            zeroCount--;
        }
        else if(oneCount!=0){
            temp->data=1;
            oneCount--;
        }
        else if(twoCount!=0){
            temp->data=2;
            twoCount--;
    }
    temp=temp->next;
}
return head;
}

Approach 2 
*******************************
    class Node
    {
    public:
        int data;
        Node *next;
        Node(int data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

********************************/
void insertAtTail(Node * & tail, Node * curr){
    tail->next=curr;
    tail=curr;
}
Node* sortList(Node *head)
{
    // Write your code here.
    //I created some dummy nodes
    Node * zeroHead=new Node(-1);
    Node * zeroTail=zeroHead;
    Node * oneHead=new Node(-1);
    Node * oneTail=oneHead;
    Node * twoHead=new Node(-1);
    Node * twoTail=twoHead;
Node * curr=head;
while(curr!=NULL){
    int value=curr->data;
    if(value==0){
        insertAtTail(zeroTail,curr);
    }
    else if(value==1){
        insertAtTail(oneTail,curr);
    }
    else if(value==2){
        insertAtTail(twoTail,curr);
    }
    curr=curr->next;
}
//merge sublists
if(oneHead->next!=NULL){
    zeroTail->next=oneHead->next;
}
else {
    zeroTail->next=twoHead->next;
}
oneTail->next=twoHead->next;
twoTail->next=NULL;
//Head sahi jagah par la rhe hai
head=zeroHead->next;
//deleting the dummy nodes
delete(zeroHead);
delete(oneHead);
delete(twoHead);
return head;

}
